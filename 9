def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,def func4(arg11, arg12):
    var13 = func7()
    var17 = func8(var13, arg12)
    if var17 < arg11:
        var22 = class10()
    else:
        var22 = class12()
    for var23 in xrange(5):
        var22.func11(var17, var13)
    var27 = func14(var13, arg11)
    var28 = -1376215826 | -820
    var29 = var17 + var28
    var30 = arg11 - (var27 - var17) - var28
    var31 = arg11 | arg12
    var32 = ((var29 + var29) ^ var27) ^ 778
    var33 = (var28 - var17) | var13 + var30
    var34 = (var28 ^ var33) - var33 & var28
    var35 = (var13 & 198298489) | var32 - 152
    var36 = var34 - var30
    var37 = var28 - var13
    var38 = var36 & (var31 ^ var29) | var31
    var39 = var37 + var17 & 1741757642
    var40 = var17 - (var38 - var17 | 610)
    var41 = (var38 - var30) | var32 + var36
    var42 = (var37 ^ var34) ^ var27 & var39
    var43 = (var13 | var29) + var40 ^ -1541330797
    var44 = var33 + (var42 & (var27 + var38))
    var45 = arg12 | var44
    if var41 < arg11:
        var46 = var38 & var28
    else:
        var46 = var42 + arg11 & -224 ^ var31
    if var38 < var36:
        var47 = var41 + var32 + var33
    else:
        var47 = var17 | var37 ^ var17 & var39
    var48 = var28 ^ var45
    result = ((var30 ^ (var29 + (var30 - var42) & var44 + arg11)) + var30) - var34
    return result
class class12(object):
    def func11(self, arg20, arg21):
        return 0
class class10(class12):
    def func11(self, arg18, arg19):
        return 0
def func7():
    func5()
    result = len(range(18))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : 7
def func1(arg1, arg2):
    var6 = func2(arg2, arg1)
    var7 = arg1 - 156 | (-2075835592 + ((-58328724 ^ 1272260574 + (arg2 | 1951577819 & 557745030) - arg1 ^ ((var6 ^ (var6 | (arg1 ^ arg2 | 1830576420))) + arg1) & arg1) + arg1) ^ 1388223545 ^ -534 ^ var6 + var6 - arg2)
    var8 = arg1 + var7
    var9 = arg2 + var7
    var10 = var7 - var8
    result = -526 & -206987192 & (767 & var9 & 1523686487) + (var10 & arg2) ^ var9 - (-981 & var7)
    return result
def func2(arg3, arg4):
    def func3(acc, rest):
        var5 = acc - -1
        if acc == 0:
            return var5
        else:
            result = func3(acc - 1, var5)
            return result
    result = func3(10, 0)
    return result
def func8(arg14, arg15):
    def func9(acc, rest):
        var16 = rest - 9
        if acc == 0:
            return var16
        else:
            result = func9(acc - 1, var16)
            return result
    result = func9(10, 0)
    return result
def func14(arg24, arg25):
    closure = [0]
    def func15(acc, rest):
        var26 = 3 & 0 + 3 + -4 + -4 | -4 | -4
        closure[0] += var26
        if acc == 0:
            return var26
        else:
            result = func15(acc - 1, var26)
            return result
    result = func15(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 1'
    print 'func_number: 4'
    print 'arg_number: 11'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 16'
    print 'arg_number: 49'
    for i in xrange(25000):
        x = 5
        x = func4(x, i)
        print x,
